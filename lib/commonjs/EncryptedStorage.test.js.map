{"version":3,"sources":["EncryptedStorage.test.ts"],"names":["RNEncryptedStorage","NativeModules","describe","afterEach","jest","clearAllMocks","it","expect","EncryptedStorage","setItem","resolves","toBeUndefined","mockImplementationOnce","Promise","reject","Error","rejects","toThrow","getItem","toEqual","resolve","undefined","removeItem","clear","options","error","message","value"],"mappings":"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","sourcesContent":["import { NativeModules } from 'react-native';\nimport EncryptedStorage, { EncryptedStorageOptions } from './EncryptedStorage';\n\nconst { RNEncryptedStorage } = NativeModules;\n\ndescribe('lib/EncryptedStorage', () => {\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('using Promises', () => {\n    describe('setItem(key, value)', () => {\n      it('should return no errors if it could store the value', () => {\n        return expect(\n          EncryptedStorage.setItem('key', 'value')\n        ).resolves.toBeUndefined();\n      });\n\n      it('should reject with an error if it could not store the value', () => {\n        RNEncryptedStorage.setItem.mockImplementationOnce(() =>\n          Promise.reject(new Error('Set error'))\n        );\n\n        return expect(EncryptedStorage.setItem('key', 'value')).rejects.toThrow(\n          'Set error'\n        );\n      });\n    });\n\n    describe('getItem(key)', () => {\n      it('should return the value if it could be retrieved succesfully', () => {\n        return expect(EncryptedStorage.getItem('key')).resolves.toEqual(\n          '{ \"foo\": 1 }'\n        );\n      });\n\n      it('should return null if no value was found for that key', () => {\n        RNEncryptedStorage.getItem.mockImplementationOnce(() =>\n          Promise.resolve(undefined)\n        );\n\n        return expect(EncryptedStorage.getItem('key')).resolves.toBeUndefined();\n      });\n\n      it('should reject with an error if it could not retrieve the value', () => {\n        RNEncryptedStorage.getItem.mockImplementationOnce(() =>\n          Promise.reject(new Error('Get error'))\n        );\n\n        return expect(EncryptedStorage.getItem('key')).rejects.toThrow(\n          'Get error'\n        );\n      });\n    });\n\n    describe('removeItem(key)', () => {\n      it('should return no error if it could removed the stored value', () => {\n        return expect(\n          EncryptedStorage.removeItem('key')\n        ).resolves.toBeUndefined();\n      });\n\n      it('should throw an error if it could not retrieve the stored value', () => {\n        RNEncryptedStorage.removeItem.mockImplementationOnce(() =>\n          Promise.reject(new Error('Remove error'))\n        );\n\n        return expect(EncryptedStorage.removeItem('key')).rejects.toThrow(\n          'Remove error'\n        );\n      });\n    });\n\n    describe('clear()', () => {\n      it('should return no error if it could clear the storage', () => {\n        return expect(EncryptedStorage.clear()).resolves.toBeUndefined();\n      });\n\n      it('should throw an error if it could not clear the storage', () => {\n        RNEncryptedStorage.clear.mockImplementationOnce(() =>\n          Promise.reject(new Error('Clear error'))\n        );\n\n        return expect(EncryptedStorage.clear()).rejects.toThrow('Clear error');\n      });\n    });\n  });\n\n  describe('using callbacks', () => {\n    const options: EncryptedStorageOptions = {};\n\n    describe('setItem(key, value)', () => {\n      it('should return no errors if it could store the value', () => {\n        EncryptedStorage.setItem('key', 'value', options, (error) => {\n          expect(error).toBeUndefined();\n        });\n      });\n\n      it('should reject with an error if it could not store the value', () => {\n        RNEncryptedStorage.setItem.mockImplementationOnce(() =>\n          Promise.reject(new Error('Set error'))\n        );\n\n        EncryptedStorage.setItem('key', 'value', options, (error) => {\n          expect(error?.message).toEqual('Set error');\n        });\n      });\n    });\n\n    describe('getItem(key)', () => {\n      it('should return the value if it could be retrieved succesfully', () => {\n        EncryptedStorage.getItem('key', options, (error, value) => {\n          expect(error).toBeUndefined();\n          expect(value).toEqual('{ \"foo\": 1 }');\n        });\n      });\n\n      it('should return null if no value was found for that key', () => {\n        RNEncryptedStorage.getItem.mockImplementationOnce(() =>\n          Promise.resolve(undefined)\n        );\n\n        EncryptedStorage.getItem('key', options, (error, value) => {\n          expect(error).toBeUndefined();\n          expect(value).toBeUndefined();\n        });\n      });\n\n      it('should reject with an error if it could not retrieve the value', () => {\n        RNEncryptedStorage.getItem.mockImplementationOnce(() =>\n          Promise.reject(new Error('Get error'))\n        );\n\n        EncryptedStorage.getItem('key', options, (error, value) => {\n          expect(error?.message).toEqual('Get error');\n          expect(value).toBeUndefined();\n        });\n      });\n    });\n\n    describe('removeItem(key)', () => {\n      it('should return no error if it could remove the stored value', () => {\n        EncryptedStorage.removeItem('key', options, (error) => {\n          expect(error).toBeUndefined();\n        });\n      });\n\n      it('should throw an error if it could not retrieve the stored value', () => {\n        RNEncryptedStorage.removeItem.mockImplementationOnce(() =>\n          Promise.reject(new Error('Remove error'))\n        );\n\n        EncryptedStorage.removeItem('key', options, (error) => {\n          expect(error?.message).toEqual('Remove error');\n        });\n      });\n    });\n\n    describe('clear()', () => {\n      it('should return no error if it could clear the storage', () => {\n        EncryptedStorage.clear(options, (error) => {\n          expect(error).toBeUndefined();\n        });\n      });\n\n      it('should throw an error if it could not clear the storage', () => {\n        RNEncryptedStorage.clear.mockImplementationOnce(() =>\n          Promise.reject(new Error('Clear error'))\n        );\n\n        EncryptedStorage.clear(options, (error) => {\n          expect(error?.message).toEqual('Clear error');\n        });\n      });\n    });\n  });\n});\n"]}