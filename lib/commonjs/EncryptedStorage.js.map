{"version":3,"sources":["EncryptedStorage.ts"],"names":["RNEncryptedStorage","NativeModules","Error","EncryptedStorage","setItem","key","value","options","cb","then","catch","getItem","removeItem","clear"],"mappings":";;;;;;;AAEA;;AAFA;AAKA,MAAM;AAAEA,EAAAA;AAAF,IAAyBC,0BAA/B;;AAEA,IAAI,CAACD,kBAAL,EAAyB;AACvB,QAAM,IAAIE,KAAJ,CAAU,iCAAV,CAAN;AACD;;AA6Bc,MAAMC,gBAAN,CAAuB;AACpC;AACF;AACA;AACA;AACA;;AAOE;AACF;AACA;AACA;AACA;AACA;AAOE,SAAOC,OAAP,CACEC,GADF,EAEEC,KAFF,EAGEC,OAHF,EAIEC,EAJF,EAKwB;AACtB,QAAIA,EAAJ,EAAQ;AACNR,MAAAA,kBAAkB,CAACI,OAAnB,CAA2BC,GAA3B,EAAgCC,KAAhC,EAAuCC,OAAvC,EAAgDE,IAAhD,CAAqDD,EAArD,EAAyDE,KAAzD,CAA+DF,EAA/D;AACA;AACD;;AAED,WAAOR,kBAAkB,CAACI,OAAnB,CAA2BC,GAA3B,EAAgCC,KAAhC,EAAuCC,OAAvC,CAAP;AACD;AAED;AACF;AACA;AACA;;;AAgBE,SAAOI,OAAP,CACEN,GADF,EAEEE,OAFF,EAGEC,EAHF,EAIiC;AAC/B,QAAIA,EAAJ,EAAQ;AACNR,MAAAA,kBAAkB,CAACW,OAAnB,CAA2BN,GAA3B,EAAgCE,OAAhC,EAAyCE,IAAzC,CAA8CD,EAA9C,EAAkDE,KAAlD,CAAwDF,EAAxD;AACA;AACD;;AAED,WAAOR,kBAAkB,CAACW,OAAnB,CAA2BN,GAA3B,EAAgCE,OAAhC,CAAP;AACD;AAED;AACF;AACA;AACA;;;AAgBE,SAAOK,UAAP,CACEP,GADF,EAEEE,OAFF,EAGEC,EAHF,EAIwB;AACtB,QAAIA,EAAJ,EAAQ;AACNR,MAAAA,kBAAkB,CAACY,UAAnB,CAA8BP,GAA9B,EAAmCE,OAAnC,EAA4CE,IAA5C,CAAiDD,EAAjD,EAAqDE,KAArD,CAA2DF,EAA3D;AACA;AACD;;AAED,WAAOR,kBAAkB,CAACY,UAAnB,CAA8BP,GAA9B,EAAmCE,OAAnC,CAAP;AACD;AAED;AACF;AACA;;;AAUE,SAAOM,KAAP,CACEN,OADF,EAEEC,EAFF,EAGwB;AACtB,QAAIA,EAAJ,EAAQ;AACNR,MAAAA,kBAAkB,CAACa,KAAnB,CAAyBN,OAAzB,EAAkCE,IAAlC,CAAuCD,EAAvC,EAA2CE,KAA3C,CAAiDF,EAAjD;AACA;AACD;;AAED,WAAOR,kBAAkB,CAACa,KAAnB,CAAyBN,OAAzB,CAAP;AACD;;AA5HmC","sourcesContent":["/* eslint-disable no-dupe-class-members */\n\nimport { NativeModules } from 'react-native';\nimport { KeychainAccessibility } from './constants';\n\nconst { RNEncryptedStorage } = NativeModules;\n\nif (!RNEncryptedStorage) {\n  throw new Error('RNEncryptedStorage is undefined');\n}\n\ntype KeychainAccessibilityKeys = keyof typeof KeychainAccessibility;\n\nexport type EncryptedStorageOptions = {\n  /**\n   * **iOS only** - Control item availability relative to the lock state of the device.\n   *\n   * If the attribute ends with the string `ThisDeviceOnly`, the item can be restored to the same device that created a backup,\n   * but it isn’t migrated when restoring another device’s backup data.\n   * [Read more](https://developer.apple.com/documentation/security/keychain_services/keychain_items/restricting_keychain_item_accessibility?language=objc)\n   *\n   * Default value: `kSecAttrAccessibleAfterFirstUnlock`\n   */\n  keychainAccessibility?: typeof KeychainAccessibility[KeychainAccessibilityKeys];\n  /**\n   * A string for identifying a set of storage items. Should not contain path separators.\n   *\n   * Uses [kSecAttrService](https://developer.apple.com/documentation/security/ksecattrservice?language=objc) on iOS\n   * and [fileName](https://developer.android.com/reference/kotlin/androidx/security/crypto/EncryptedSharedPreferences?hl=en#create) on Android.\n   *\n   * Default value: App's bundle id\n   */\n  storageName?: string;\n};\n\nexport type StorageErrorCallback = (error?: Error) => void;\nexport type StorageValueCallback = (error?: Error, value?: string) => void;\n\nexport default class EncryptedStorage {\n  /**\n   * Writes data to the disk, using SharedPreferences or KeyChain, depending on the platform.\n   * @param {string} key - A string that will be associated to the value for later retrieval.\n   * @param {string} value - The data to store.\n   */\n  static setItem(\n    key: string,\n    value: string,\n    options?: EncryptedStorageOptions\n  ): Promise<void>;\n\n  /**\n   * Writes data to the disk, using SharedPreferences or KeyChain, depending on the platform.\n   * @param {string} key - A string that will be associated to the value for later retrieval.\n   * @param {string} value - The data to store.\n   * @param {Function} cb - The function to call when the operation completes.\n   */\n  static setItem(\n    key: string,\n    value: string,\n    options?: EncryptedStorageOptions,\n    cb?: StorageErrorCallback\n  ): void;\n  static setItem(\n    key: string,\n    value: string,\n    options?: EncryptedStorageOptions,\n    cb?: StorageErrorCallback\n  ): void | Promise<void> {\n    if (cb) {\n      RNEncryptedStorage.setItem(key, value, options).then(cb).catch(cb);\n      return;\n    }\n\n    return RNEncryptedStorage.setItem(key, value, options);\n  }\n\n  /**\n   * Retrieves data from the disk, using SharedPreferences or KeyChain, depending on the platform and returns it as the specified type.\n   * @param {string} key - A string that is associated to a value.\n   */\n  static getItem(\n    key: string,\n    options?: EncryptedStorageOptions\n  ): Promise<string | null>;\n\n  /**\n   * Retrieves data from the disk, using SharedPreferences or KeyChain, depending on the platform and returns it as the specified type.\n   * @param {string} key - A string that is associated to a value.\n   * @param {Function} cb - The function to call when the operation completes.\n   */\n  static getItem(\n    key: string,\n    options?: EncryptedStorageOptions,\n    cb?: StorageValueCallback\n  ): void;\n  static getItem(\n    key: string,\n    options?: EncryptedStorageOptions,\n    cb?: StorageValueCallback\n  ): void | Promise<string | null> {\n    if (cb) {\n      RNEncryptedStorage.getItem(key, options).then(cb).catch(cb);\n      return;\n    }\n\n    return RNEncryptedStorage.getItem(key, options);\n  }\n\n  /**\n   * Deletes data from the disk, using SharedPreferences or KeyChain, depending on the platform.\n   * @param {string} key - A string that is associated to a value.\n   */\n  static removeItem(\n    key: string,\n    options?: EncryptedStorageOptions\n  ): Promise<void>;\n\n  /**\n   * Deletes data from the disk, using SharedPreferences or KeyChain, depending on the platform.\n   * @param {string} key - A string that is associated to a value.\n   * @param {Function} cb - The function to call when the operation completes.\n   */\n  static removeItem(\n    key: string,\n    options?: EncryptedStorageOptions,\n    cb?: StorageErrorCallback\n  ): void;\n  static removeItem(\n    key: string,\n    options?: EncryptedStorageOptions,\n    cb?: StorageErrorCallback\n  ): void | Promise<void> {\n    if (cb) {\n      RNEncryptedStorage.removeItem(key, options).then(cb).catch(cb);\n      return;\n    }\n\n    return RNEncryptedStorage.removeItem(key, options);\n  }\n\n  /**\n   * Clears all data from disk, using SharedPreferences or KeyChain, depending on the platform.\n   */\n  static clear(options?: EncryptedStorageOptions): Promise<void>;\n  /**\n   * Clears all data from disk, using SharedPreferences or KeyChain, depending on the platform.\n   * @param {Function} cb - The function to call when the operation completes.\n   */\n  static clear(\n    options?: EncryptedStorageOptions,\n    cb?: StorageErrorCallback\n  ): void;\n  static clear(\n    options?: EncryptedStorageOptions,\n    cb?: StorageErrorCallback\n  ): void | Promise<void> {\n    if (cb) {\n      RNEncryptedStorage.clear(options).then(cb).catch(cb);\n      return;\n    }\n\n    return RNEncryptedStorage.clear(options);\n  }\n}\n"]}